name: Testing CICD      
on:
  pull_request:  #### this indicates on with the workflow should trigger in this i mentione on pull request
    types:     ## types indicates types of reqquest opened in the repo
        - opened
        - reopened
        - closed
    branches:      ##### thisindicates we can spefice when the changes is made in branches it should only trigger mentioned branch
        - main    
  workflow_dispatch: ##### this indicates where we can run the workflow manully via console
  push:             #### this indicates on with the workflow should trigger if they push code to mentione branch 
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'CD.yaml'           ###### keyworkds: name, on, pull_request, push, types, branches, jobs, runs-on, steps, uses,run
jobs:
  lint:
    runs-on: ubuntu-latest
    steps: 
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
  install:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: Get code
      uses: actions/checkout@v3
    - name: Install dependencies
      run: npm ci
    - name: Lint
      run: npm run lint
  test:
    needs: install
    runs-on: ubuntu-latest
    steps: 
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Test code
        run: npm run test
  artifacts:
    needs: install
    runs-on: ubuntu-latest
    outputs:                                ###output is an reserved key
      script-file: ${{ steps.publish.outputs.script-file }} 
      ### this output block is access over all this actions
      ## this script-file can we user own defined and in code outout.script-file should be same as declared script-file={} 
      ## steps.publish should be same as id mentioned  id: publish 
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Test code
        run: npm run test
      - name: Build code
        run: npm run build
      - name: Deploy code
        run: echo "Deploying..." 
      - name: Publish JS file
        id: publish                              ####### this id is used to refer the output value
        # run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT';' 
                                ##alternatice syntax 
        run: find dist/assets/*.js -type f -execdir echo '::set-output name=script::{}' ';'

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
            name: dist-files
            path: |
              dist
              package.json
  download_artifact:
    needs: [ install,artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
  output_artifact:
    needs: [ artifacts,download_artifact]
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "{{ needs.artifacts.outputs.script-file }}" 
        ### this needs.artifacts indicates where we calling output block we should refer that job block needs
        ## so in output_artifact job needs is artifacts
        ## outputs.script-file is where refr=ering the mail output block , script-file should be same as main block where me called
        ## so by this we can call or use the outputs between jobs
  deploy:
    needs: [ test,output_artifact]  
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Test code
        run: npm run test
      - name: Build code
        run: npm run build
      - name: Deploy code
        run: echo "Deploying..." 
  
        

