name: Testing CICD      
on:
  pull_request:  #### this indicates on with the workflow should trigger in this i mentione on pull request
    types:     ## types indicates types of reqquest opened in the repo
        - opened
        - reopened
        - closed
    branches:      ##### thisindicates we can spefice when the changes is made in branches it should only trigger mentioned branch
        - main    
  workflow_dispatch: ##### this indicates where we can run the workflow manully via console
  push:             #### this indicates on with the workflow should trigger if they push code to mentione branch 
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'CD.yaml'      ###### keyworkds: name, on, pull_request, push, types, branches, jobs, runs-on, steps, uses,run
      - 'CI.yaml'      
env:
  MONGODB_DB_NAME: testing_name   #### In This Env variable can be accessed by whole workflow any job 
jobs:
  lint:
    runs-on: ubuntu-latest
    steps: 
      - name: Get code
        uses: actions/checkout@v3
      - name: cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-module-${{ hashFiles('**/packages.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint
        run: npm run lint
  install:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: Get code
      uses: actions/checkout@v3
    - name: Install dependencies
      run: npm ci
    - name: Lint
      run: npm run lint
  test:
    environment: Testing  ### this are the Environment specfic secrets where It can access credentail its stored in enviroments in repo
    
    # env: 
      # MONGODB_CLUSTER_ADDRESS: testcluster.qhtpn7m.mongodb.net ## In this we have declared the Env variable inside job so we can access this 
      # MONGODB_USERNAME: manojkumarn631                         ## Env variable only in this job connot be accessed by other job
      # MONGODB_PASSWORD: Ish0vCOXjAH0F2rp
      # PORT: 3000
                                         ##  ( OR ) 

  ##one more method with hardcoding the values in the workflow we can save those values in git repo as a secrets so no one can see this credentials 
    env:
      MONGODB_CLUSTER_ADDRESS: ${{ secrets.MONGODB_CLUSTER_ADDRESS }}
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}                      
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
       ##repository secrets are read when a workflow run is queued 
       ##environment secrets are read when a job referencing the environment starts.

    needs: install
    runs-on: ubuntu-latest
    steps: 
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-module-${{ hashFiles('**/packages-lock.json') }}
      ### this is used to cache the dependencies which will reduce the workflow runtime
      ## Once the cache dependencies is writen in any block it will act as center dependency which it will used by other jobs no need to again 
      ## if new package is added it will resynck this depenencid 
      ## key: deps-node-module-{{ hashFiles('**/packages-lock.json') }} this where file is created as unique hashfiles
      - name: Install dependencies
        run: npm ci
      # - name: Run server
      #   run: npm start & npx wait-on http://127.0.0.1:$PORT  ##### this $PORT is referring to PORT Environment variable in line 41
      - name: Lint
        run: npm run lint
      - name: Test code
        run: npm run test
      - name: Outputing DB_username
        run: echo  "MONGODB_USERNAME:${{ env.MONGODB_USERNAME}}" 
  artifacts:
    needs: install
    runs-on: ubuntu-latest
    outputs:                                ###output is an reserved key
      script-file: ${{ steps.publish.outputs.script-file }} 
      ### this output block is access over all this actions
      ## this script-file can we user own defined and in code outout.script-file should be same as declared script-file={} 
      ## steps.publish should be same as id mentioned  id: publish 
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Test code
        id: run-test
        run: npm run test
      - name: upload test report
        if: failure() && steps.run-test.outcome == 'failure'  
        ##this if condition is used to create that previous step condition fail or success for example I used success condition
        ##if previous job get success then this step should run and same for failure also 
        ## this If condiion is used in jobs ,steps level
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
      - name: Build code
        run: npm run build
      - name: Deploy code
        run: echo "Deploying..." 
      - name: Publish JS file
        id: publish                              ####### this id is used to refer the output value
        # run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT';' 
                                ##alternatice syntax 
        run: find dist/assets/*.js -type f -execdir echo '::set-output name=script::{}' ';'

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
            name: dist-files
            path: |
              dist
              package.json
      - name: outputing the env value
        run: echo "MONGODB_DB_NAME:${{env.MONGODB_DB_NAME}}" ### In this we are accessing the Env variable which is declared globally so 
        ### we can access those Env variable in any jobs                   
  download_artifact:
    needs: [ install,artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
  output_artifact:
    needs: [ artifacts,download_artifact]
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.artifacts.outputs.script-file }}" 
        ### this needs.artifacts indicates where we calling output block we should refer that job block needs
        ## so in output_artifact job needs is artifacts
        ## outputs.script-file is where refr=ering the mail output block , script-file should be same as main block where me called
        ## so by this we can call or use the outputs between jobs
  deploy:
    needs: [ test,output_artifact]  
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Test code
        run: npm run test
      - name: Build code
        run: npm run build
      - name: Deploy code
        run: echo "Deploying..." 
  report:
    needs: [lint, install, test, artifacts, download_artifact, output_artifact, deploy ]
    ## see in this job I used failure condition. if any job or step gets failer this job will execute otherwise it wont run , generate report 
    if: failure() 
    runs-on: ubuntu-latest
    steps:
      - name: Getting the final report
        run: |
         echo " Resport generate successfully"
         echo "${{ toJson(github) }}"


